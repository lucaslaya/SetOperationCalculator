# CS1800 SET CALCULATOR
# Made by Lucas Laya
# Discord: Lucass#0420

import sys

from tkinter import *
import itertools
from itertools import chain, combinations
from PIL import Image, ImageTk

def union(a,b,c={0}):   #Union calculator
    if c == {0}:
        ans = a|b
    else:
        ans = a|b|c
    return ans

def intersection(a,b,c={0}):    #Intersection calculator
    if c == {0}:
        ans = a&b
    else:
        ans = a&b&c
    return ans

def difference(a,b,c={0}):  #Difference calculator
    if c == {0}:
        ans = a-b
    else:
        ans = a-b-c
    return ans

def sym_difference(a,b,c={0}):  #Symmetric Difference calculator
    if c == {0}:
        ans = a^b
    else:
        ans = a^b^c
    return ans

def complement(a,u):  #Complement calculator
    ans = u-a
    return ans

def power(a):   #Power calculator
    s = list(a)
    ans = chain.from_iterable(combinations(s, r) for r in range(len(s) + 1))
    return ans

def cartesian(a,b,c={0}):   #Cartesian product calculator
    ans = []
    if c == {0}:
        for item in itertools.product(list(a),list(b)):
            ans.append(item)
    else:
        for item in itertools.product(list(a),list(b),list(c)):
            ans.append(item)
    return ans

#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 6.1
#  in conjunction with Tcl version 8.6
#    Apr 18, 2021 02:55:17 PM EDT  platform: Linux

# Thanks to PAGE for facilitating a lot of the tedious Tkinter code. All of the initialization has been changed, the
# main use of PAGE was for easily setting up the layout of the GUI as well as placing all the widgets on the window.

""" Title: PAGE
Author: Don Rozenberg
Date: 2021
Code version: 6.1
Availability: http://page.sourceforge.net/ """

def calculate2set():    #Calculate all of the solutions for 2 set inputs
    A = a.get()             #Convert input A to set
    A_array = A.split(',')
    A_set = set(A_array)

    B = b.get()             #Convert input B to set
    B_array = B.split(',')
    B_set = set(B_array)

    union_ans = union(A_set,B_set)  #Union calculation
    union_ans = sorted(union_ans)
    uans.set(union_ans)
    print('Union: {0}'.format(union_ans))

    intersection_ans = intersection(A_set, B_set)   #Intersection calculation
    intersection_ans = sorted(intersection_ans)
    ians.set(intersection_ans)
    print('Intersection: {0}'.format(intersection_ans))

    difference_ans = difference(A_set, B_set)   #Difference calculation
    difference_ans = sorted(difference_ans)
    dans.set(difference_ans)
    print('Difference: {0}'.format(difference_ans))

    sym_difference_ans = sym_difference(A_set, B_set)   #Symmetric difference calculation
    sym_difference_ans = sorted(sym_difference_ans)
    sdans.set(sym_difference_ans)
    print('Symmetric Difference: {0}'.format(sym_difference_ans))

    cartesian_ans = cartesian(A_set, B_set)     #Cartesian product calculation
    cartesian_ans = sorted(cartesian_ans)
    cans.set(cartesian_ans)
    print('Cartesian Product: {0}'.format(cartesian_ans))

def calculate3set():    #Calculate all of the solutions for 3 set inputs
    A = a.get()             #Convert input A to set
    A_array = A.split(',')
    A_set = set(A_array)

    B = b.get()             #Convert input B to set
    B_array = B.split(',')
    B_set = set(B_array)

    C = c.get()             #Convert input C to set
    C_array = C.split(',')
    C_set = set(C_array)

    union_ans = union(A_set, B_set, C_set)      #Union calculation
    union_ans = sorted(union_ans)
    uans.set(union_ans)
    print('Union: {0}'.format(union_ans))

    intersection_ans = intersection(A_set, B_set, C_set)    #Intersection calculation
    intersection_ans = sorted(intersection_ans)
    ians.set(intersection_ans)
    print('Intersection: {0}'.format(intersection_ans))

    cartesian_ans = cartesian(A_set, B_set, C_set)      #Cartesian product calculation
    cartesian_ans = sorted(cartesian_ans)
    cans.set(cartesian_ans)
    print('Cartesian Product: {0}'.format(cartesian_ans))

def calculatepc():
    A = a.get()  # Convert input A to set
    A_array = A.split(',')
    A_set = set(A_array)

    U = u.get()  # Convert input U to set
    U_array = U.split(',')
    U_set = set(U_array)

    power_ans = power(A_set)  # Power set calculation
    power_ans = sorted(power_ans)
    pans.set(power_ans)
    print('Power Set: {0}'.format(power_ans))

    complement_ans = complement(A_set,U_set)  # Power set calculation
    complement_ans = sorted(complement_ans)
    cans.set(complement_ans)
    print('Complement: {0}'.format(complement_ans))

print("--------------------Set Operations Calculator--------------------")
print("Made by Lucas Laya")
print("Discord: Lucass#0420")
print("-------------------------------------------------------------------")
input("To operate the calculator please select a mode followed by a number of sets for your calculation. \nThis calculator outputs all of the answers to console to facilitate viewing. \nPress Enter to Continue")

calculatortype = int(input("Type 1 for Union - Intersection - Difference - Symmetric Difference - Cartesian Product \nType 2 for Power Set - Complement \n-->"))    #Calculator select message

if calculatortype == 1: #User selected Union - intersection etc.

    setnum = int(input("How many sets would you like to work with (2 or 3) \n-->"))

    if setnum == 2:     #2 set calculations

        window = Tk()   #Initialize tkinter module

        window.geometry("1280x720")     #Initialize window
        window.minsize(1, 1)
        window.maxsize(1905, 1050)
        window.resizable(1, 1)
        window.title("Two Set Calculations")
        window.configure(background="#b3c7dc")

        uans = StringVar()      #Creating global storage variables for the answers
        ians = StringVar()
        dans = StringVar()
        sdans = StringVar()
        cans = StringVar()

        image1 = Image.open("union2.png")   #Import each image with information on the calculations
        union2pic = ImageTk.PhotoImage(image1)

        image2 = Image.open("intersection2.png")
        intersection2pic = ImageTk.PhotoImage(image2)

        image3 = Image.open("difference2.png")
        difference2pic = ImageTk.PhotoImage(image3)

        image4 = Image.open("symdifference2.png")
        symdifference2pic = ImageTk.PhotoImage(image4)

        image5 = Image.open("cartesianproduct2.png")
        cartesianproduct2pic = ImageTk.PhotoImage(image5)

        a = Entry(window)   #Input set A
        a.place(relx=0.047, rely=0.028, height=33, relwidth=0.153)
        a.configure(background="white")
        a.configure(borderwidth="3")
        a.configure(cursor="fleur")
        a.configure(font="TkFixedFont")

        label_a = Label(window)
        label_a.place(relx=0.016, rely=0.028, height=33, width=39)
        label_a.configure(text='''A =''')
        label_a.configure(background="#b3c7dc")

        b = Entry(window)       #Input set B
        b.place(relx=0.273, rely=0.028, height=33, relwidth=0.153)
        b.configure(background="white")
        b.configure(borderwidth="3")
        b.configure(font="TkFixedFont")

        label_b = Label(window)
        label_b.place(relx=0.242, rely=0.028, height=33, width=38)
        label_b.configure(text='''B =''')
        label_b.configure(background="#b3c7dc")

        unionvenn = Label(window, image=union2pic)                                 #Information on the calculations
        unionvenn.image = union2pic
        unionvenn.place(relx=0.023, rely=0.125, height=500, width=222)


        intersectionvenn = Label(window, image=intersection2pic)
        intersectionvenn.image = intersection2pic
        intersectionvenn.place(relx=0.219, rely=0.125, height=500, width=222)

        differencevenn = Label(window, image=difference2pic)
        differencevenn.image = difference2pic
        differencevenn.place(relx=0.414, rely=0.125, height=500, width=222)

        symdifferencevenn = Label(window, image=symdifference2pic)
        symdifferencevenn.image = symdifference2pic
        symdifferencevenn.place(relx=0.609, rely=0.125, height=500, width=222)

        cartesianproductvenn = Label(window, image=cartesianproduct2pic)
        cartesianproductvenn.image = cartesianproduct2pic
        cartesianproductvenn.place(relx=0.805, rely=0.125, height=500, width=222)

        solve = Button(window)      #Solution button
        solve.place(relx=0.461, rely=0.028, height=31, width=89)
        solve.configure(borderwidth="2")
        solve.configure(text='''Calculate''')
        solve.configure(command=calculate2set)  # Calculate 2 sets
        solve.configure(background="#8cadcf")

        union_ans = Entry(window, textvariable=uans)        #Output of answers
        union_ans.place(relx=0.023, rely=0.917, height=33, width=222)
        union_ans.configure(background="white")
        union_ans.configure(font="TkFixedFont")

        intersection_ans = Entry(window, textvariable=ians)
        intersection_ans.place(relx=0.219, rely=0.917, height=33, width=222)
        intersection_ans.configure(background="white")
        intersection_ans.configure(font="TkFixedFont")

        difference_ans = Entry(window, textvariable=dans)
        difference_ans.place(relx=0.414, rely=0.917, height=33, width=222)
        difference_ans.configure(background="white")
        difference_ans.configure(font="TkFixedFont")

        symdifference_ans = Entry(window, textvariable=sdans)
        symdifference_ans.place(relx=0.609, rely=0.917, height=33, width=222)
        symdifference_ans.configure(background="white")
        symdifference_ans.configure(font="TkFixedFont")

        cartesian_ans = Entry(window, textvariable=cans)
        cartesian_ans.place(relx=0.805, rely=0.917, height=33, width=222)
        cartesian_ans.configure(background="white")
        cartesian_ans.configure(font="TkFixedFont")

        window.mainloop()

    elif setnum == 3:   # 3 Set calculations

        window = Tk()  # Initialize tkinter module

        window.geometry("1280x720")  # Initialize window
        window.minsize(1, 1)
        window.maxsize(1905, 1050)
        window.resizable(1, 1)
        window.title("Three Set Calculations")
        window.configure(background="#b3c7dc")

        uans = StringVar()  # Creating global storage variables for the answers
        ians = StringVar()
        cans = StringVar()

        image1 = Image.open("union3.png")  # Import each image with information on the calculations
        union2pic = ImageTk.PhotoImage(image1)

        image2 = Image.open("intersection3.png")
        intersection2pic = ImageTk.PhotoImage(image2)

        image3 = Image.open("cartesianproduct3.png")
        cartesianproduct2pic = ImageTk.PhotoImage(image3)

        a = Entry(window)  # Input set A
        a.place(relx=0.047, rely=0.028, height=33, relwidth=0.153)
        a.configure(background="white")
        a.configure(borderwidth="3")
        a.configure(cursor="fleur")
        a.configure(font="TkFixedFont")

        label_a = Label(window)
        label_a.place(relx=0.016, rely=0.028, height=33, width=39)
        label_a.configure(text='''A =''')
        label_a.configure(background="#b3c7dc")

        b = Entry(window)  # Input set B
        b.place(relx=0.273, rely=0.028, height=33, relwidth=0.153)
        b.configure(background="white")
        b.configure(borderwidth="3")
        b.configure(font="TkFixedFont")

        label_b = Label(window)
        label_b.place(relx=0.242, rely=0.028, height=33, width=38)
        label_b.configure(text='''B =''')
        label_b.configure(background="#b3c7dc")

        c = Entry(window)  # Input set C
        c.place(relx=0.499, rely=0.028, height=33, relwidth=0.153)
        c.configure(background="white")
        c.configure(borderwidth="3")
        c.configure(font="TkFixedFont")

        label_c = Label(window)
        label_c.place(relx=0.468, rely=0.028, height=33, width=38)
        label_c.configure(text='''C =''')
        label_c.configure(background="#b3c7dc")

        unionvenn = Label(window, image=union2pic)  # Information on the calculations
        unionvenn.image = union2pic
        unionvenn.place(relx=0.023, rely=0.125, height=500, width=222)

        intersectionvenn = Label(window, image=intersection2pic)
        intersectionvenn.image = intersection2pic
        intersectionvenn.place(relx=0.219, rely=0.125, height=500, width=222)

        cartesianproductvenn = Label(window, image=cartesianproduct2pic)
        cartesianproductvenn.image = cartesianproduct2pic
        cartesianproductvenn.place(relx=0.414, rely=0.125, height=500, width=222)

        solve = Button(window)  # Solution button
        solve.place(relx=0.687, rely=0.028, height=31, width=89)
        solve.configure(borderwidth="2")
        solve.configure(text='''Calculate''')
        solve.configure(command=calculate3set)  # Calculate 2 sets
        solve.configure(background="#8cadcf")

        union_ans = Entry(window, textvariable=uans)  # Output of answers
        union_ans.place(relx=0.023, rely=0.917, height=33, width=222)
        union_ans.configure(background="white")
        union_ans.configure(font="TkFixedFont")

        intersection_ans = Entry(window, textvariable=ians)
        intersection_ans.place(relx=0.219, rely=0.917, height=33, width=222)
        intersection_ans.configure(background="white")
        intersection_ans.configure(font="TkFixedFont")

        cartesian_ans = Entry(window, textvariable=cans)
        cartesian_ans.place(relx=0.414, rely=0.917, height=33, width=222)
        cartesian_ans.configure(background="white")
        cartesian_ans.configure(font="TkFixedFont")

        window.mainloop()

    else:   #Error message and response
        print("ERROR: Invalid Input")
        print("Shutting down...")
        quit()

elif calculatortype == 2:   #User selected power set - complement

    window = Tk()  # Initialize tkinter module

    window.geometry("1280x720")  # Initialize window
    window.minsize(1, 1)
    window.maxsize(1905, 1050)
    window.resizable(1, 1)
    window.title("Power Set and Complement")
    window.configure(background="#b3c7dc")

    pans = StringVar()  # Creating global storage variables for the answers
    cans = StringVar()

    image1 = Image.open("power.png")  # Import each image with information on the calculations
    powerpic = ImageTk.PhotoImage(image1)

    image2 = Image.open("complement.png")
    complementpic = ImageTk.PhotoImage(image2)

    a = Entry(window)  # Input set A
    a.place(relx=0.047, rely=0.028, height=33, relwidth=0.153)
    a.configure(background="white")
    a.configure(borderwidth="3")
    a.configure(cursor="fleur")
    a.configure(font="TkFixedFont")

    label_a = Label(window)
    label_a.place(relx=0.016, rely=0.028, height=33, width=39)
    label_a.configure(text='''A =''')
    label_a.configure(background="#b3c7dc")

    u = Entry(window)  # Input set U
    u.place(relx=0.273, rely=0.028, height=33, relwidth=0.153)
    u.configure(background="white")
    u.configure(borderwidth="3")
    u.configure(font="TkFixedFont")

    label_u = Label(window)
    label_u.place(relx=0.242, rely=0.028, height=33, width=38)
    label_u.configure(text='''U =''')
    label_u.configure(background="#b3c7dc")

    label_info = Label(window)
    label_info.place(relx=0.235, rely=0.078, height=33, width=300)
    label_info.configure(text='''Please input a set for U as your Universal Set''')
    label_info.configure(background="#b3c7dc")

    powervenn = Label(window, image=powerpic)  # Information on the calculations
    powervenn.image = powerpic
    powervenn.place(relx=0.023, rely=0.125, height=500, width=222)

    complementvenn = Label(window, image=complementpic)
    complementvenn.image = complementpic
    complementvenn.place(relx=0.219, rely=0.125, height=500, width=222)

    solve = Button(window)  # Solution button
    solve.place(relx=0.461, rely=0.028, height=31, width=89)
    solve.configure(borderwidth="2")
    solve.configure(text='''Calculate''')
    solve.configure(command=calculatepc)  # Calculate 2 sets
    solve.configure(background="#8cadcf")

    power_ans = Entry(window, textvariable=pans)  # Output of answers
    power_ans.place(relx=0.023, rely=0.917, height=33, width=222)
    power_ans.configure(background="white")
    power_ans.configure(font="TkFixedFont")

    complement_ans = Entry(window, textvariable=cans)
    complement_ans.place(relx=0.219, rely=0.917, height=33, width=222)
    complement_ans.configure(background="white")
    complement_ans.configure(font="TkFixedFont")

    window.mainloop()

else:   #Error message and response
    print("ERROR: Invalid Input")
    print("Shutting down...")
    quit()
